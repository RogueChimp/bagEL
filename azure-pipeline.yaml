name: $(BuildDefinitionName)_$(date:yyyyMMdd)$(rev:.r)

trigger:
  batch: true
  branches:
    include:
    - main
  tags:
    include:
    - v*

resources:
  repositories:
    - repository: core
      type: git 
      name: devops/pipeline_core
      ref: refs/heads/main

variables:
  - ${{ if eq(variables['Build.Reason'],'PullRequest') }}:
    - template: cicd/templates/vars/sbx.yml
    - group: sbox-secrets
    - group: sbox-variables
    - name: env
      value: sbx
  - ${{ elseif eq(variables['Build.SourceBranchName'],'main') }}:
    - template: cicd/templates/vars/nonprd.yml
    - group: np-secrets
    - group: np-variables
    - name: env
      value: nonprd
  - ${{ elseif contains(variables['Build.SourceBranch'], 'refs/tags') }}:
    - template: cicd/templates/vars/prd.yml
    - group: prd-secrets
    - group: prd-variables
    - name: env
      value: prd

steps:
  - ${{ if eq(variables['Build.Reason'],'PullRequest') }}:
    - template: code_scan.yml@core
      parameters:
        repoType: ado
        serviceCxn: devops-TMXSBX-Integrations

    - script: |
        TARGET_BRANCH=$(grep -Eo '[^/]+$' <<<$TARGET_BRANCH)
        SOURCE_BRANCH=$(grep -Eo '[^/]+$' <<<$SOURCE_BRANCH)
        cp .git/refs/remotes/origin/{$TARGET_BRANCH,$SOURCE_BRANCH} .git/refs/heads/
        echo "##vso[task.setvariable variable=IS_PR]true"
      env:
        TARGET_BRANCH: $(System.PullRequest.TargetBranch)
        SOURCE_BRANCH: $(System.PullRequest.SourceBranch)
      displayName: populate .git/refs/heads/

  - task: UsePythonVersion@0
    displayName: 'Use Python 3.8'
    inputs:
      versionSpec: 3.8

  - script: pip install black==22.12.0 && black . --check
    displayName: Black formatting/linting

  - script: pip install pytest pytest-cov
    displayName: Install pytest

  - script: pip install -r bagel/requirements.txt
    displayName: Install bagel dependencies

  - task: Bash@3
    inputs:
      filePath: pip-install-all-requirements.sh
    displayName: Install source dependencies

  - task: Bash@3
    inputs:
      filePath: run-tests.sh
    displayName: pytest

  - task: qetza.replacetokens.replacetokens-task.replacetokens@3
    displayName: 'Replace Tokens'
    inputs:
      rootDirectory: '$(Build.SourcesDirectory)/cicd/tfvars/$(env)'
      targetFiles: '**/**'
      enableTelemetry: false
      actionOnMissing: continue

  - template: cicd/templates/terraform-apply.yaml
    parameters:
      backendServiceArm: '${{ variables.backendServiceArm }}'
      backendAzureRmResourceGroupName: '${{ variables.backendAzureRmResourceGroupName }}'
      backendAzureRmStorageAccountName: '${{ variables.backendAzureRmStorageAccountName }}'
      backendAzureRmContainerName: '${{ variables.backendAzureRmContainerName }}'
      backendAzureRmKey: '${{ variables.backendAzureRmKey }}' 
      workingDirectory: '$(System.DefaultWorkingDirectory)/cicd/terraform/'
      environment: ${{ variables.environment }}
      terraform_version: ${{ variables.terraform_version }}

  - template: cicd/templates/docker.yaml
    parameters:
      containerRegistry: ${{ variables.containerRegistry }}

  - template: cicd/templates/terraform-apply.yaml
    parameters:
       backendServiceArm: '${{ variables.backendServiceArm }}'
       backendAzureRmResourceGroupName: '${{ variables.backendAzureRmResourceGroupName }}'
       backendAzureRmStorageAccountName: '${{ variables.backendAzureRmStorageAccountName }}'
       backendAzureRmContainerName: '${{ variables.backendAzureRmContainerName }}'
       backendAzureRmKey: '${{ variables.backendAzureRmKeyAci }}' 
       workingDirectory: '$(System.DefaultWorkingDirectory)/cicd/terraform-aci/'
       environment: ${{ variables.environment }}
       terraform_version: ${{ variables.terraform_version }}
