import os
import time
import requests
import logging
from bagel import Bagel, BagelIntegration, Bite, Table

logging.basicConfig(
    level=logging.WARNING,
    format='{"timestamp":"%(asctime)s", "level_name":"%(levelname)s", "function_name":"%(funcName)s", "line_number":"%(lineno)d", "message":"%(message)s"}',
)


class NationalVulnerabilityDatabase(BagelIntegration):

    source = "national_vulnerability_database"

    def __post_init__(self) -> None:
        self._load_config()
        self.base_url = "https://services.nvd.nist.gov/rest/json/"

    def _load_config(self):
        self._auth_secret = os.getenv("NATIONAL_VULNERABILITY_DATABASE_SECRET")

    def get_data(self, table: Table, last_run_timestamp, current_timestamp):
        self.next_url = self.nvd_get_url(
            table.name, last_run_timestamp, current_timestamp, 0
        )
        data, results_per_page, total_results = self.nvd_get_data(self.next_url)

        index = results_per_page
        logging.info("Total Results: " + str(total_results))
        logging.info("Results Per Page: " + str(results_per_page))
        if total_results == 0:
            return None
        else:
            yield Bite(data)

        while index < total_results:
            time.sleep(6)
            self.next_url = self.nvd_get_url(
                table.name, last_run_timestamp, current_timestamp, index
            )
            data, results_per_page, total_results = self.nvd_get_data(self.next_url)
            if data == []:
                logging.error(
                    "Failed to complete processing at "
                    + str(index)
                    + " / "
                    + str(total_results)
                    + " results"
                )
                break
            else:
                yield Bite(data)
                index = index + results_per_page
        return None

    def nvd_get_url(self, table_name, last_run_timestamp, current_timestamp, index):
        last_run_timestamp = last_run_timestamp.strftime("%Y-%m-%dT%H:%M:%S.%fz")
        current_timestamp = current_timestamp.strftime("%Y-%m-%dT%H:%M:%S.%fz")
        since = f"lastModStartDate={last_run_timestamp}"
        until = f"lastModEndDate={current_timestamp}"
        startIndex = f"startIndex={index}"
        url = f"{self.base_url}{table_name}/2.0?{since}&{until}&{startIndex}"
        return url

    def nvd_get_data(self, url):
        logging.info(f"url: {url}")
        header = {
            "Content-Type": "application/json",
            "Accept": "application/json",
            "Basic": "{self._auth_secret}",
        }
        results_per_page = 0
        total_results = 0
        data = []
        time.sleep(6)
        response = requests.get(url, headers=header)

        if response.status_code == 403:
            # Despite following the best practices from the documentation, it still returns an unauthorized message occasionally
            logging.warning(
                "Error (403) Unauthorized: sleeping for 14 seconds and then retrying... "
            )
            time.sleep(14)
            response = requests.get(url, headers=header)
        if response.status_code != 200:
            logging.error(response.text)
            raise RuntimeError(
                f"ERROR running {url}\n{response.status_code = }\n{response.text}"
            )
        if response.status_code == 200:
            data_dictionary = response.json()
            for k in data_dictionary.keys():
                if type(data_dictionary[k]).__name__ == "list":
                    data = data_dictionary[k]
                    break
            try:
                results_per_page = int(data_dictionary["resultsPerPage"])
                total_results = int(data_dictionary["totalResults"])
            except:
                raise Exception("Response is not in expected format")
        return data, results_per_page, total_results


if __name__ == "__main__":

    bagel = Bagel(NationalVulnerabilityDatabase())
    bagel.run()
