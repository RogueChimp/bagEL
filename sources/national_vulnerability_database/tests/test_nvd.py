import datetime
import pytest
import unittest
from unittest import mock
from bagel.table import Table
from national_vulnerability_database.get_data import NationalVulnerabilityDatabase
from .fakes import (
    mock_get_url,
    mock_get_request_200,
    mock_get_request_404,
    mock_get_request_403,
    mock_get_request_503,
    mock_get_request,
    mock_time_sleep,
    fake_response_data,
)


class TestNVD(unittest.TestCase):
    @mock.patch("national_vulnerability_database.get_data.os.getenv")
    def setUp(self, mock_os_getenv) -> None:
        self._auth_secret, self.base_url = [
            "FAKE_AUTH_TOKEN",
            "https://services.nvd.nist.gov/rest/json/",
        ]

        mock_os_getenv.side_effect = [self._auth_secret, self.base_url]
        self.current_timestamp = datetime.datetime(
            9999, 9, 9, 9, 9, 9, tzinfo=datetime.timezone.utc
        )
        self.last_run_timestamp = datetime.datetime(
            1111, 1, 1, 1, 1, 1, tzinfo=datetime.timezone.utc
        )
        self.nvd = NationalVulnerabilityDatabase()

    @pytest.mark.unit_test
    @mock.patch("national_vulnerability_database.get_data.time.sleep")
    @mock.patch("national_vulnerability_database.get_data.requests.get")
    def test_when_api_errors_then_raise_runtime_error(
        self, mock_requests_get, mock_sleep
    ):
        mock_sleep.side_effect = mock_time_sleep()
        mock_requests_get.return_value = mock_get_request_404()

        with self.assertRaises(RuntimeError):
            self.nvd.nvd_get_data("foo")

    @pytest.mark.unit_test
    @mock.patch("national_vulnerability_database.get_data.time.sleep")
    @mock.patch("national_vulnerability_database.get_data.requests.get")
    def test_when_api_returns_403_then_raise_runtime_error(
        self, mock_requests_get, mock_sleep
    ):

        mock_requests_get.return_value = mock_get_request_403()
        mock_sleep.side_effect = mock_time_sleep()

        with self.assertRaises(RuntimeError):
            self.nvd.nvd_get_data("foo")

    @pytest.mark.unit_test
    @mock.patch("national_vulnerability_database.get_data.time.sleep")
    @mock.patch("national_vulnerability_database.get_data.requests.get")
    def test_when_api_returns_403_then_the_api_is_called_twice(
        self, mock_requests_get, mock_sleep
    ):
        mock_requests_get.return_value = mock_get_request_403()
        mock_sleep.side_effect = mock_time_sleep()
        try:
            self.nvd.nvd_get_data("foo")
        except:
            self.assertEqual(mock_requests_get.call_count, 6)

    @pytest.mark.unit_test
    @mock.patch("national_vulnerability_database.get_data.time.sleep")
    @mock.patch("national_vulnerability_database.get_data.requests.get")
    def test_when_api_returns_503_then_the_api_is_called_twice(
        self, mock_requests_get, mock_sleep
    ):
        mock_requests_get.return_value = mock_get_request_503()
        mock_sleep.side_effect = mock_time_sleep()
        try:
            self.nvd.nvd_get_data("foo")
        except:
            self.assertEqual(mock_requests_get.call_count, 6)

    @pytest.mark.unit_test
    def test_when_class_instantiated_then_sets_proper_secret_variables_in_load_config_and_base_url(
        self,
    ):
        expected = [self._auth_secret, self.base_url]
        result = [
            self.nvd._auth_secret,
            self.nvd.base_url,
        ]
        self.assertListEqual(result, expected)

    @pytest.mark.unit_test
    @mock.patch(
        "national_vulnerability_database.get_data.NationalVulnerabilityDatabase.nvd_get_url"
    )
    def test_when_get_url_called_returns_in_correct_format(self, mock_requests_get):
        expected = mock_get_url
        mock_requests_get.return_value = expected
        result = self.nvd.nvd_get_url(
            "foo", self.current_timestamp, self.last_run_timestamp, 0
        )
        assert result == expected

    @pytest.mark.unit_test
    @mock.patch("national_vulnerability_database.get_data.time.sleep")
    @mock.patch("national_vulnerability_database.get_data.requests.get")
    def test_when_get_data_response_does_not_contain_paging_details(
        self, mock_requests_get, mock_sleep
    ):

        mock_requests_get.side_effect = mock_get_request_200(
            json=fake_response_data, status_code=200
        )
        mock_sleep.side_effect = mock_time_sleep()

        with self.assertRaises(Exception, msg="Response is not in expected format"):
            self.nvd.nvd_get_data("foo")

    @pytest.mark.unit_test
    @mock.patch("national_vulnerability_database.get_data.time.sleep")
    @mock.patch("national_vulnerability_database.get_data.requests.get")
    def test_when_get_data_has_no_results_then_exits_successfully(
        self, mock_requests_get, mock_sleep
    ):
        mock_requests_get.return_value = mock_get_request()
        mock_sleep.side_effect = mock_time_sleep()
        try:
            self.nvd.get_data(
                Table(name="fake_table_name"),
                self.current_timestamp,
                self.last_run_timestamp,
            )
        except:
            pytest.fail("Unexpected error in get_data()")

    @pytest.mark.unit_test
    @mock.patch(
        "national_vulnerability_database.get_data.NationalVulnerabilityDatabase._load_config"
    )
    def test_when_class_instantiated_then_calls_load_config(self, mock_load_config):
        NationalVulnerabilityDatabase()

        assert mock_load_config.called
